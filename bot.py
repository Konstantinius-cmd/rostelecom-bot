import re  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
from dotenv import load_dotenv
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

user_states = {}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def is_valid_phone(phone: str) -> bool:
    clean = re.sub(r"[^\d]", "", phone)
    return len(clean) == 11 and clean.startswith(("7", "8"))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –§–ò–û
def is_valid_fio(text: str) -> bool:
    return all(char.isalpha() or char.isspace() for char in text) and len(text.strip().split()) >= 2

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞
def is_valid_address(text: str) -> bool:
    return len(text.strip().split()) >= 2

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —É—Å–ª—É–≥", callback_data="new_service")],
        [InlineKeyboardButton("üí≥ –°–º–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞", callback_data="change_tariff")],
        [InlineKeyboardButton("üõ† –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏", callback_data="issues")],
        [InlineKeyboardButton("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="restart")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id

    if query.data == "new_service":
        user_states[chat_id] = {"step": 1, "data": {}}
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —É—Å–ª—É–≥–∏
        keyboard = [
            [InlineKeyboardButton("üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç", callback_data="service_internet")],
            [InlineKeyboardButton("üì∫ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å —Ç–µ–ª–µ–≤–∏–¥–µ–Ω–∏–µ–º", callback_data="service_internet_tv")],
            [InlineKeyboardButton("üåêüì∫ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç, —Ç–µ–ª–µ–≤–∏–¥–µ–Ω–∏–µ –∏ —Å–∏–º-–∫–∞—Ä—Ç–∞", callback_data="service_internet_tv_sim")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å?", reply_markup=reply_markup)

    elif query.data == "service_internet":
        user_states[chat_id]["data"]["–£—Å–ª—É–≥–∞"] = "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç"
        await query.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        user_states[chat_id]["step"] = 2
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")

    elif query.data == "service_internet_tv":
        user_states[chat_id]["data"]["–£—Å–ª—É–≥–∞"] = "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å —Ç–µ–ª–µ–≤–∏–¥–µ–Ω–∏–µ–º"
        await query.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ —Å —Ç–µ–ª–µ–≤–∏–¥–µ–Ω–∏–µ–º. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        user_states[chat_id]["step"] = 2
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")

    elif query.data == "service_internet_tv_sim":
        user_states[chat_id]["data"]["–£—Å–ª—É–≥–∞"] = "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç, —Ç–µ–ª–µ–≤–∏–¥–µ–Ω–∏–µ –∏ —Å–∏–º-–∫–∞—Ä—Ç–∞"
        await query.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, —Ç–µ–ª–µ–≤–∏–¥–µ–Ω–∏—è –∏ —Å–∏–º-–∫–∞—Ä—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        user_states[chat_id]["step"] = 2
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")

    # –ï—Å–ª–∏ –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä –¥–ª—è —Å–º–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–∞ –∏–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–µ–ø–æ–ª–∞–¥–æ–∫
    elif query.data == "change_tariff":
        await query.message.reply_text(
            "–ï—Å–ª–∏ –≤—ã —É–∂–µ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å —É—Å–ª—É–≥–∞–º–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –†–æ—Å—Ç–µ–ª–µ–∫–æ–º –∏ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ ‚Äî –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ –Ω–æ–º–µ—Ä—É –≥–æ—Ä—è—á–µ–π –ª–∏–Ω–∏–∏: 8 800 100 08 00",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="restart")]]),
        )
    elif query.data == "issues":
        await query.message.reply_text(
            "–î–ª—è —Ä–µ—à–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –ø–æ—Å–µ—Ç–∏—Ç–µ https://komi.rt.ru/care –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ: 8 800 100 08 00",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="restart")]]),
        )
    elif query.data == "restart":
        await start(update, context)
    elif query.data == "cancel":
        user_states.pop(chat_id, None)
        await query.message.reply_text(
            "üîÅ –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –µ—Å–ª–∏ –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É. –ù–∞–∂–º–∏—Ç–µ /start.")
    elif query.data == "back":
        if chat_id not in user_states:
            return

        state = user_states[chat_id]
        step = state.get("step")

        if step == 2:
            state["step"] = 1
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=cancel_markup())
        elif step == 3:
            state["step"] = 2
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å (–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):",
                                           reply_markup=back_cancel_markup())

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    text = update.message.text.strip()

    if text.lower() == "/cancel":
        user_states.pop(chat_id, None)
        await update.message.reply_text(
            "üîÅ –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –µ—Å–ª–∏ –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É. –ù–∞–∂–º–∏—Ç–µ /start.")
        return

    if chat_id not in user_states:
        return

    state = user_states[chat_id]

    if state["step"] == 2:
        if not is_valid_fio(text):
            await update.message.reply_text(
                "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û (–º–∏–Ω–∏–º—É–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã).")
            return

        state["data"]["–§–ò–û"] = text
        state["step"] = 3
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å (–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):",
            reply_markup=back_cancel_markup()
        )
    elif state["step"] == 3:
        if not is_valid_address(text):
            await update.message.reply_text(
                "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: –≥. –°—ã–∫—Ç—ã–≤–∫–∞—Ä, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 1, –∫–≤. 2).")
            return

        state["data"]["–ê–¥—Ä–µ—Å"] = text
        state["step"] = 4
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=back_cancel_markup()
        )
    elif state["step"] == 4:
        if not is_valid_phone(text):
            await update.message.reply_text(
                "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞—á–∏–Ω–∞—è —Å 7 –∏–ª–∏ 8, 11 —Ü–∏—Ñ—Ä).")
            return

        state["data"]["–¢–µ–ª–µ—Ñ–æ–Ω"] = text

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞—è–≤–∫–µ
        info = state["data"]
        message = (
            "üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:\n\n"
            f"üë§ –§–ò–û: {info['–§–ò–û']}\n"
            f"üè† –ê–¥—Ä–µ—Å: {info['–ê–¥—Ä–µ—Å']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {info['–¢–µ–ª–µ—Ñ–æ–Ω']}\n"
            f"üõ† –£—Å–ª—É–≥–∞: {info['–£—Å–ª—É–≥–∞']}"
        )
        await context.bot.send_message(chat_id=ADMIN_ID, text=message)
        await update.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É. –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä!")
        user_states.pop(chat_id, None)


# –ö–Ω–æ–ø–∫–∞ "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
def cancel_markup():
    return InlineKeyboardMarkup([[InlineKeyboardButton("üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="cancel")]])


# –ö–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
def back_cancel_markup():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"),
            InlineKeyboardButton("üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="cancel")
        ]
    ])


# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("cancel", handle_message))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

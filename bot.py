from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)
from dotenv import load_dotenv
import os
import re
import json

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

user_states = {}

# –í–∞–ª–∏–¥–∞—Ü–∏—è
def is_valid_phone(phone: str) -> bool:
    clean = re.sub(r"[^\d]", "", phone)
    return len(clean) == 11 and clean.startswith(("7", "8"))

def is_valid_fio(text: str) -> bool:
    return all(char.isalpha() or char.isspace() for char in text) and len(text.strip().split()) >= 2

def is_valid_address(text: str) -> bool:
    return len(text.strip().split()) >= 2

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å WebApp", web_app=WebAppInfo(url="https://konstantinius-cmd.github.io/rostelecom-webapp/"))],
        [InlineKeyboardButton("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="restart")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ (–µ—Å–ª–∏ –±—É–¥—É—Ç)
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id

    if query.data == "restart":
        await start(update, context)
    elif query.data == "cancel":
        user_states.pop(chat_id, None)
        await query.message.reply_text("üîÅ –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    elif query.data == "back":
        if chat_id not in user_states:
            return
        step = user_states[chat_id]["step"]
        if step == 2:
            user_states[chat_id]["step"] = 1
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=cancel_markup())
        elif step == 3:
            user_states[chat_id]["step"] = 2
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å (–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):", reply_markup=back_cancel_markup())

# –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    text = update.message.text.strip()

    if text.lower() == "/cancel":
        user_states.pop(chat_id, None)
        await update.message.reply_text("üîÅ –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return

    if chat_id not in user_states:
        return

    state = user_states[chat_id]

    if state["step"] == 1:
        if not is_valid_fio(text):
            await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞).")
            return
        state["data"]["–§–ò–û"] = text
        state["step"] = 2
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å (–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):", reply_markup=back_cancel_markup())

    elif state["step"] == 2:
        if not is_valid_address(text):
            await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å.")
            return
        state["data"]["–ê–¥—Ä–µ—Å"] = text
        state["step"] = 3
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=back_cancel_markup())

    elif state["step"] == 3:
        if not is_valid_phone(text):
            await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (11 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞—è —Å 7 –∏–ª–∏ 8).")
            return
        state["data"]["–¢–µ–ª–µ—Ñ–æ–Ω"] = text
        info = state["data"]
        message = (
            "üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:\n\n"
            f"üë§ –§–ò–û: {info['–§–ò–û']}\n"
            f"üè† –ê–¥—Ä–µ—Å: {info['–ê–¥—Ä–µ—Å']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {info['–¢–µ–ª–µ—Ñ–æ–Ω']}"
        )
        await context.bot.send_message(chat_id=ADMIN_ID, text=message)
        await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.")
        user_states.pop(chat_id, None)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ WebApp –¥–∞–Ω–Ω—ã—Ö
async def handle_webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("üî• –ü–û–õ–£–ß–ï–ù–´ –î–ê–ù–ù–´–ï –ò–ó WEBAPP!")
    data = update.effective_message.web_app_data.data
    print(f"–î–∞–Ω–Ω—ã–µ –æ—Ç WebApp: {data}")  # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    try:
        parsed = json.loads(data)
        action = parsed.get("action")

        if action == "connect_service":
            chat_id = update.message.chat_id
            user_states[chat_id] = {"step": 1, "data": {}}
            await update.message.reply_text(
                "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ª—É–≥–∏. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
                reply_markup=cancel_markup()
            )

        elif action == "info":
            await update.message.reply_text(f"‚ÑπÔ∏è {parsed.get('message')}")
        else:
            await update.message.reply_text("‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ WebApp.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp.")

# –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
def cancel_markup():
    return InlineKeyboardMarkup([[InlineKeyboardButton("üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="cancel")]])

def back_cancel_markup():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"),
            InlineKeyboardButton("üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="cancel")
        ]
    ])

# –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤—Ä–µ–º–µ–Ω–Ω–æ)
async def debug_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("ü™µ [debug] update:")
    print(update)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("cancel", handle_message))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp_data))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
    app.add_handler(MessageHandler(filters.ALL, debug_all))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

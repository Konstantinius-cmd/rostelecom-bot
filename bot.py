from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
import re
import json

BOT_TOKEN = "7792379435:AAG0cvZ4zyQNjW76Ktigui2UUBOzYSozcn0"
ADMIN_ID = 911720830

user_states = {}

# –ü—Ä–æ–≤–µ—Ä–∫–∏
def is_valid_phone(phone: str) -> bool:
    clean = re.sub(r"[^\d]", "", phone)
    return len(clean) == 11 and clean.startswith(("7", "8"))

def is_valid_fio(text: str) -> bool:
    return all(char.isalpha() or char.isspace() for char in text) and len(text.strip().split()) >= 2

def is_valid_address(text: str) -> bool:
    return len(text.strip().split()) >= 2

# –°—Ç–∞—Ä—Ç / –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å WebApp", web_app=WebAppInfo(url="https://konstantinius-cmd.github.io/rostelecom-webapp/"))],
        [KeyboardButton("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    if update.message:
        await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ (–µ—Å–ª–∏ –±—É–¥—É—Ç)
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id

    if query.data == "restart":
        await start(update, context)
    elif query.data == "cancel":
        user_states.pop(chat_id, None)
        await query.message.reply_text("üîÅ –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ. –ù–∞–∂–º–∏—Ç–µ /start.")
    elif query.data == "back":
        if chat_id not in user_states:
            return
        step = user_states[chat_id]["step"]
        if step == 2:
            user_states[chat_id]["step"] = 1
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=cancel_markup())
        elif step == 3:
            user_states[chat_id]["step"] = 2
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å (–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):", reply_markup=back_cancel_markup())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ WebApp –¥–∞–Ω–Ω—ã—Ö
async def handle_webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("üî• –ü–û–õ–£–ß–ï–ù–´ –î–ê–ù–ù–´–ï –ò–ó WEBAPP!")
    print(update.effective_message.web_app_data.data)  # –æ—Ç–ª–∞–¥–∫–∞
    data = update.effective_message.web_app_data.data
    try:
        parsed = json.loads(data)
        action = parsed.get("action")

        if action == "connect_service":
            chat_id = update.message.chat_id
            user_states[chat_id] = {"step": 1, "data": {}}
            await update.message.reply_text(
                "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ª—É–≥–∏. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
                reply_markup=cancel_markup()
            )
        elif action == "info":
            await update.message.reply_text(f"‚ÑπÔ∏è {parsed.get('message')}")
        else:
            await update.message.reply_text("‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ WebApp.")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞:", e)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    text = update.message.text.strip()

    if text == "üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        await start(update, context)
        return

    if chat_id not in user_states:
        return

    state = user_states[chat_id]

    if state["step"] == 1:
        if not is_valid_fio(text):
            await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞).")
            return
        state["data"]["–§–ò–û"] = text
        state["step"] = 2
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å (–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):", reply_markup=back_cancel_markup())

    elif state["step"] == 2:
        if not is_valid_address(text):
            await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: –≥. –°—ã–∫—Ç—ã–≤–∫–∞—Ä, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 1, –∫–≤. 2).")
            return
        state["data"]["–ê–¥—Ä–µ—Å"] = text
        state["step"] = 3
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=back_cancel_markup())

    elif state["step"] == 3:
        if not is_valid_phone(text):
            await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (11 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞—è —Å 7 –∏–ª–∏ 8).")
            return
        state["data"]["–¢–µ–ª–µ—Ñ–æ–Ω"] = text
        info = state["data"]
        message = (
            "üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:\n\n"
            f"üë§ –§–ò–û: {info['–§–ò–û']}\n"
            f"üè† –ê–¥—Ä–µ—Å: {info['–ê–¥—Ä–µ—Å']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {info['–¢–µ–ª–µ—Ñ–æ–Ω']}"
        )
        await context.bot.send_message(chat_id=ADMIN_ID, text=message)
        await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.")
        user_states.pop(chat_id, None)

# –ö–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
def cancel_markup():
    return InlineKeyboardMarkup([[InlineKeyboardButton("üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="cancel")]])

def back_cancel_markup():
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"),
        InlineKeyboardButton("üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="cancel")
    ]])

# –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—Å–µ–≥–æ –ø–æ–¥—Ä—è–¥ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
async def debug_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("ü™µ [debug] update:")
    print(update)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("cancel", handle_message))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp_data))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
